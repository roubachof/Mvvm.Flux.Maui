// <auto-generated/>
// https://gist.githubusercontent.com/Char0394/eb6512cf75db05423202a9d3e1bbaf57/raw/ffd3e48cf27ebfd953e3efdd80dfd65651c7ebd1/NullableDatePickerRenderer.cs

using System;
using System.ComponentModel;

using Android.App;
using Android.Content;
using Android.OS;
using Android.Util;
using Android.Widget;

using Symbiot.Mobile.Droid.Renderers;
using Symbiot.Mobile.Presentation.CustomViews;

using Xamarin.Forms;
using Xamarin.Forms.Platform.Android;

using DatePicker = Xamarin.Forms.DatePicker;

[assembly: ExportRenderer(typeof(NullableDatePicker), typeof(NullableDatePickerRenderer))]

namespace Symbiot.Mobile.Droid.Renderers
{
    public class NullableDatePickerRenderer : ViewRenderer<NullableDatePicker, EditText>
    {
        DatePickerDialog _dialog;

        public NullableDatePickerRenderer(Context context) 
            : base(context)
        {
        }

        protected override void OnElementChanged(ElementChangedEventArgs<NullableDatePicker> e)
        {
            base.OnElementChanged(e);

            if (e.OldElement != null && Control != null)
            {
                var oldControl = Control;
                oldControl.Click -= OnPickerClick;
                oldControl.FocusChange -= OnPickerFocusChange;
            }

            this.SetNativeControl(new Android.Widget.EditText(Context));
            if (Control == null || e.NewElement == null)
                return;

            this.Control.Click += OnPickerClick;
            this.Control.Text = Element.Date.ToString(Element.Format);
            this.Control.KeyListener = null;
            this.Control.FocusChange += OnPickerFocusChange;
            this.Control.Enabled = Element.IsEnabled;

            UpdateFont();
            UpdateMinimumDate();
            UpdateMaximumDate();
            UpdateCharacterSpacing();
        }

        protected override void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            base.OnElementPropertyChanged(sender, e);

            if (e.PropertyName == DatePicker.DateProperty.PropertyName
                || e.PropertyName == DatePicker.FormatProperty.PropertyName)
                SetDate(Element.Date);
            else if (e.PropertyName == DatePicker.MinimumDateProperty.PropertyName)
                UpdateMinimumDate();
            else if (e.PropertyName == DatePicker.MaximumDateProperty.PropertyName)
                UpdateMaximumDate();
            else if (e.PropertyName == DatePicker.CharacterSpacingProperty.PropertyName)
                UpdateCharacterSpacing();
            else if (e.PropertyName == DatePicker.FontAttributesProperty.PropertyName
                     || e.PropertyName == DatePicker.FontFamilyProperty.PropertyName
                     || e.PropertyName == DatePicker.FontSizeProperty.PropertyName)
                UpdateFont();
        }

        void UpdateCharacterSpacing()
        {
            if (Build.VERSION.SdkInt >= BuildVersionCodes.Lollipop)
            {
                Control.LetterSpacing = Element.CharacterSpacing.ToEm();
            }
        }

        void UpdateFont()
        {
            Control.Typeface = Font.OfSize(Element.FontFamily, Element.FontSize).ToTypeface();
            Control.SetTextSize(ComplexUnitType.Sp, (float)Element.FontSize);
        }

        void UpdateMaximumDate()
        {
            if (_dialog != null)
            {
                _dialog.DatePicker.MaxDate = (long)Element.MaximumDate.ToUniversalTime()
                    .Subtract(DateTime.MinValue.AddYears(1969))
                    .TotalMilliseconds;
            }
        }

        void UpdateMinimumDate()
        {
            if (_dialog != null)
            {
                _dialog.DatePicker.MinDate = (long)Element.MinimumDate.ToUniversalTime()
                    .Subtract(DateTime.MinValue.AddYears(1969))
                    .TotalMilliseconds;
            }
        }

        void OnPickerFocusChange(object sender, FocusChangeEventArgs e)
        {
            if (e.HasFocus)
            {
                ShowDatePicker();
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (Control != null)
            {
                this.Control.Click -= OnPickerClick;
                this.Control.FocusChange -= OnPickerFocusChange;

                if (_dialog != null)
                {
                    _dialog.Hide();
                    _dialog.Dispose();
                    _dialog = null;
                }
            }

            base.Dispose(disposing);
        }

        void OnPickerClick(object sender, EventArgs e)
        {
            ShowDatePicker();
        }

        void SetDate(DateTime date)
        {
            this.Control.Text = date.ToString(Element.Format);
            Element.Date = date;
        }

        private void ShowDatePicker()
        {
            CreateDatePickerDialog(this.Element.Date.Year, this.Element.Date.Month - 1, this.Element.Date.Day);
            _dialog.Show();
        }

        void CreateDatePickerDialog(int year, int month, int day)
        {
            NullableDatePicker view = Element;
            _dialog = new DatePickerDialog(
                Context,
                (o, e) =>
                    {
                        view.Date = e.Date;
                        ((IElementController)view).SetValueFromRenderer(VisualElement.IsFocusedProperty, false);
                        Control.ClearFocus();

                        _dialog = null;
                    },
                year,
                month,
                day);

            _dialog.SetButton(
                "Done",
                (sender, e) =>
                {
                    SetDate(_dialog.DatePicker.DateTime);
                    this.Element.Format = this.Element.OriginalFormat;
                    this.Element.AssignValue();
                });
            _dialog.SetButton2(
                "Clear",
                (sender, e) =>
                {
                    this.Element.CleanDate();
                    Control.Text = this.Element.Format;
                });
        }
    }

    internal static class Extensions
    {
        internal static float ToEm(this double pt)
        {
            return (float)pt * 0.0624f; //Coefficient for converting Pt to Em
        }
    }
}